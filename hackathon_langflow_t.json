{"id":"9f23693f-01e1-4e23-94d8-7ac624f4c3cf","data":{"nodes":[{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-SYrJK","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"Your goal is to create text and prompt for ultrarealistic image for an INSTAGRAM post based on the Information from User. Avoid using '*' character. \nThe text should be interesting and attract readers, whereas the image should be relevant to text and mesmerize people.\nStructure your answer in the following way : \n\ntext: \"your text for instagram\" \n\nprompt:\"your prompt for image generation\"\n\n\nInformation from User: {user}\n\n\n\n\n\n\n\n\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","load_from_db":false},"user":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"user","display_name":"user","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","base_classes":["Message"],"display_name":"Prompt","documentation":"","custom_fields":{"template":["user"]},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"edited":false},"type":"Prompt"},"dragging":false,"height":423,"id":"Prompt-SYrJK","position":{"x":2223.5750263614773,"y":349.7040780194954},"positionAbsolute":{"x":2223.5750263614773,"y":349.7040780194954},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-5umZ2","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"a short hook story of war between dwarves and elves and a writer of that story","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str"},"sender":{"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Session ID for the message.","title_case":false,"type":"str"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false},"type":"ChatInput"},"dragging":false,"height":309,"id":"ChatInput-5umZ2","position":{"x":1693.079629343766,"y":427.7868139608022},"positionAbsolute":{"x":1693.079629343766,"y":427.7868139608022},"selected":false,"type":"genericNode","width":384},{"id":"CustomComponent-zgHJ0","type":"genericNode","position":{"x":3491.7721925595674,"y":155.02034804568157},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\nimport requests\nimport base64\n\n\n\nclass CustomComponent(Component):\n    \n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n    \n    \n    inputs = [\n        MessageTextInput(name=\"input_value\", display_name=\"Input Value\", value=\"Hello, World!\"),\n        StrInput(\n            name=\"instagram_user_id\",\n            display_name=\"instagram_user_id\",\n            info=\"Enter your instagram_user_id.\"\n        ),\n        StrInput(\n            name=\"instagram_graph_api_token\",\n            display_name=\"instagram_graph_api_token\",\n            info=\"Enter your instagram_graph_api_token.\"\n        ),\n        StrInput(\n            name=\"image_generation_MLAIapi_key\",\n            display_name=\"image_generation_MLAIapi_key\",\n            info=\"Enter your image_generation_MLAIapi_key.\"\n        )\n        \n    ]\n    \n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    \n            \n    def build_output(self) -> Data:\n        data = Data(value=self.input_value)\n        \n        my_text=list(data)[1][1]['value']\n        \n        api_key=self.image_generation_MLAIapi_key      #'12011d66443b471d8d5d7d91cc5320ea' #need to hide\n        access_token=self.instagram_graph_api_token #'EAAGcry2OyuEBO2AFUZBNdMq3WXZCXJQUQfzeKZAac1gHmN0dpaw7CEq17p3R67774DSTvbrJgQoy5SESzPfiHZBRLemdfOTHq6bZAhi0Y7YdDIhxZCgaACulTkET8uJHySxaZCx4u6Yd2vOHoJkuZAqq4NmGm7iOjbDPzbEZAZCtVDv6oYHTnfxUQxBPeCEcdIlVnS'\n        ig_user_id=self.instagram_user_id #17841468053205975  #from facebook business manager settings you can find your insta account id \n\n        def post_an_image_to_instagram(image_url, ig_user_id , access_token , caption= None ):\n        \n                    api_version='v20.0' #might change with the developments in facebook, for now it is v20.0 \n                \n                    #To post an image you need two steps! \n                \n                    #step one _____________________\n                    url = f'https://graph.facebook.com/{api_version}/{ig_user_id}/media'  # url we will use to make a request to post an image only in step 1\n                  \n                    params = {\n                        'image_url': image_url, #image should be running on the server ( lots of free websites doing that) + the format is jpeg only (  documentation stated that )\n                        'caption': caption,\n                        'access_token': access_token  #you can get it from facebook for developers --- ) tools --) generate token ( but give it the necessary permissions )\n                    }\n                \n                    # Make the first POST request\n                    request_one=requests.post(url, params=params) \n                \n                    id = request_one.json()['id'] #their api returns us a special creation id that we will need to then post our image\n                \n                    # step two _____________________\n                \n                    # Construct the URL for the second step \n                    url = f'https://graph.facebook.com/{api_version}/{ig_user_id}/media_publish'\n                    # Define the parameters\n                    params = {\n                        'creation_id': id,\n                        'access_token': access_token\n                    }\n                \n                    # Make the POST request\n                    request_two=requests.post(url, params=params)\n                    \n                    return ' Success, the result from the first request:' , request_one.json(), 'the result from the second request:', request_two.json()\n    \n        def image_generator(prompt:str, api_key:str):\n        \n                    base_url='https://api.aimlapi.com'\n                \n                    headers = {\n                        \"Authorization\": 'Bearer '+api_key,\n                    }\n                \n                    payload = {\n                        \"prompt\": prompt,\n                        \"model\": \"stabilityai/stable-diffusion-xl-base-1.0\",\n                    }\n                \n                    response = requests.post(\n                        \"https://api.aimlapi.com/images/generations/with-url\", headers=headers, json=payload\n                    )\n                \n                    relative_url=response.json()[\"output\"][\"choices\"][0][\"url\"]\n                    full_url=base_url+relative_url\n                \n                    return full_url\n        \n        # Extracting text\n        # Extracting the first part between the first two occurrences of \"\n        text_start = my_text.find('text: \"') + len('text: \"')\n        text_end = my_text.find('\"', text_start)\n        text = my_text[text_start:text_end]\n        \n        prompt_start = my_text.find('prompt: \"') + len('prompt: \"')\n        prompt_end = my_text.find('\"', prompt_start)\n        prompt = my_text[prompt_start:prompt_end]\n        \n        # Displaying the results\n        print(\"Text:\", text)\n        print(\"Prompt:\", prompt)\n        print('full text:', my_text)\n        self.status = data\n        \n        image_url= image_generator(prompt, api_key)\n        \n        post_an_image_to_instagram(image_url, ig_user_id , access_token , caption=text  )\n        \n        return data\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"image_generation_MLAIapi_key":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"4af95078b4a34472ae3fee0b95e3f3bb","name":"image_generation_MLAIapi_key","display_name":"image_generation_MLAIapi_key","advanced":false,"dynamic":false,"info":"Enter your image_generation_MLAIapi_key.","title_case":false,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input Value","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"instagram_graph_api_token":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"EAAFwNfI2UrEBO2IFdF6ZBrnNvznxwSWTgEqs6ZCKX6aFFAhZCDkpyyS0cUYlWdLHw7vzBLb2XSxNjlOFJVzAcwyuXiXsxc5sN7dsitDqH1xW5NQvH3F61GKdQueIzII8w3jEpIOHQMpppPopZBS3yaAZCMmaWwvmhZAD80wqEE1iNfXpDpZBrdoOENn2hOYlJfQ","name":"instagram_graph_api_token","display_name":"instagram_graph_api_token","advanced":false,"dynamic":false,"info":"Enter your instagram_graph_api_token.","title_case":false,"type":"str"},"instagram_user_id":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"17841467557171418","name":"instagram_user_id","display_name":"instagram_user_id","advanced":false,"dynamic":false,"info":"Enter your instagram_user_id.","title_case":false,"type":"str"}},"description":"Use as a template to create your own component.","icon":"custom_components","base_classes":["Data"],"display_name":"Text extr.+ INSTAGRAM. post","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","instagram_user_id","instagram_graph_api_token","image_generation_MLAIapi_key"],"beta":false,"edited":true},"id":"CustomComponent-zgHJ0","description":"Use as a template to create your own component.","display_name":"Text extr.+ inst. post"},"selected":false,"width":384,"height":595,"positionAbsolute":{"x":3491.7721925595674,"y":155.02034804568157},"dragging":false},{"id":"GroqModel-gOn12","type":"genericNode","position":{"x":2782.0771284128377,"y":123.53424649026763},"data":{"type":"GroqModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.groq_constants import MODEL_NAMES\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"groq_api_key\",\n            display_name=\"Groq API Key\",\n            info=\"API key for the Groq API.\",\n        ),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=MODEL_NAMES,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            info=\"The input to the model.\",\n        ),\n        BoolInput(\n            name=\"stream\",\n            display_name=\"Stream\",\n            info=STREAM_INFO_TEXT,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        output = ChatGroq(  # type: ignore\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n        )\n\n        return output  # type: ignore\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"groq_api_base":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"groq_api_base","display_name":"Groq API Base","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Base URL path for API requests, leave blank if not using a proxy or service emulator.","title_case":false,"type":"str"},"groq_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"","name":"groq_api_key","display_name":"Groq API Key","advanced":false,"input_types":[],"dynamic":false,"info":"API key for the Groq API.","title_case":false,"password":true,"type":"str"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The input to the model.","title_case":false,"type":"str"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Output Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate.","title_case":false,"type":"int"},"model_name":{"trace_as_metadata":true,"options":["llama3-8b-8192","llama3-70b-8192","mixtral-8x7b-32768","gemma-7b-it","gemma2-9b-it"],"required":false,"placeholder":"","show":true,"value":"llama3-70b-8192","name":"model_name","display_name":"Model","advanced":false,"dynamic":false,"info":"The name of the model to use.","title_case":false,"type":"str"},"n":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"n","display_name":"N","advanced":true,"dynamic":false,"info":"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.","title_case":false,"type":"int"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":0.1,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].","title_case":false,"type":"float"}},"description":"Generate text using Groq.","icon":"Groq","base_classes":["LanguageModel","Message"],"display_name":"Groq","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["groq_api_key","groq_api_base","max_tokens","temperature","n","model_name","input_value","stream","system_message"],"beta":false,"edited":false},"id":"GroqModel-gOn12"},"selected":false,"width":384,"height":639,"positionAbsolute":{"x":2782.0771284128377,"y":123.53424649026763},"dragging":false}],"edges":[{"source":"ChatInput-5umZ2","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-5umZ2œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-SYrJK","targetHandle":"{œfieldNameœ:œuserœ,œidœ:œPrompt-SYrJKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"user","id":"Prompt-SYrJK","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-5umZ2","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-5umZ2{œdataTypeœ:œChatInputœ,œidœ:œChatInput-5umZ2œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-SYrJK{œfieldNameœ:œuserœ,œidœ:œPrompt-SYrJKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-SYrJK","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-SYrJKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"GroqModel-gOn12","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-gOn12œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"GroqModel-gOn12","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-SYrJK","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-SYrJK{œdataTypeœ:œPromptœ,œidœ:œPrompt-SYrJKœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GroqModel-gOn12{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-gOn12œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"GroqModel-gOn12","sourceHandle":"{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-gOn12œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-zgHJ0","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-zgHJ0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"CustomComponent-zgHJ0","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"GroqModel","id":"GroqModel-gOn12","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-GroqModel-gOn12{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-gOn12œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-zgHJ0{œfieldNameœ:œinput_valueœ,œidœ:œCustomComponent-zgHJ0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":-923.5712085463645,"y":179.1889246952013,"zoom":0.576756371017533}},"description":"llam3","name":"hackathon_langflow_t","last_tested_version":"1.0.10","endpoint_name":null,"is_component":false}